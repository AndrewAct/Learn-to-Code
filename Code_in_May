#Code Academy 
#The following codes are from Code Academy
#If infringement is involved please contact
#Quotation mark: String 
#This file is based on Python primarily
#But some other commands may also included.


#May 21, 2019
#Function
# Return Function
def calculate_age(current_year, birth_year):
  age = current_year - birth_year
  return age
  
my_age = calculate_age(2049, 1993)
dads_age = calculate_age(2049, 1953)
print("I am "+str(my_age)+" years old and my dad is "+str(dads_age)+" years old")

#Multi Return Variable 
def get_boundaries(target,margin):
  low_limit = target - margin
  high_limit = target + margin
  return low_limit, high_limit

low, high = get_boundaries(100,20)
print(low)
print(high)

#Scope and Parameter
current_year = 2048

def calculate_age(birth_year):
  age = current_year - birth_year
  return age

print(current_year)

print(calculate_age(1970))

#Review
#Set the repeat time as default value 10
def repeat_stuff(stuff, num_repeats=10):
  return stuff*num_repeats

lyrics = repeat_stuff("Row ", 3) + "Your Boat. "
song = repeat_stuff(lyrics)

print(song)

#Getting Ready for Physics Class
#5/22/2019
def f_to_c(f_temp):
  c_temp = (f_temp -32)*5/9
  return c_temp 

  train_mass = 22680
train_acceleration = 10
train_distance = 100

bomb_mass = 1

def get_force(mass,acceleration):
  return mass * acceleration

train_force = get_force(train_mass,train_acceleration)

print(train_force)
print("The GE train supplies"+ str(train_force) + "Newtons of force")

def get_energy(mass,c=3*10**8):
  return mass * c**2

bomb_energy = get_energy(bomb_mass)

print("A 1kg bomb supplies"+str(bomb_energy)+ "Joules")

def get_work(mass,acceleration,distance):
  force = get_force(mass,acceleration)
  return force * distance  

train_work = get_work(train_mass,train_acceleration,train_distance)

print("The GE train does" + str(train_work) + "Joules of work over"+ str(train_distance) + "meters.")


#Notice: When print a sentence, must use string, not int 
#Review the statdardized format of defining a Function

#Bash 
#Command in python
#ls lists all files and directories in the working directory.
#pwd outputs the name of the current working directory.
$ls
#cd stands for “change directory”.
#mkdir creates a new directory in the working directory.
#touch creates a new file inside the working directory

#5/24/2019
#BICYCLE WORLD
#Change directory
# cd ../.. 
# Change the depository up to 2 levels 
  
#Navigate to terminal in Mac
#MacBook-Pro-2:/ chenzhuo$ ls
#Applications			etc
#Library				home
#Network				installer.failurerequests
#System				net
#Users				private
#Volumes				sbin
#anaconda3			tmp
#bin				usr
#cores				var
#dev				vm
#MacBook-Pro-2:/ chenzhuo$ 
#MacBook-Pro-2:~ chenzhuo$ echo "Hello Command Line";
#Hello Command Line
#MacBook-Pro-2:~ chenzhuo$ echo "Hello Command Line">> hello_cli.txt
#MacBook-Pro-2:~ chenzhuo$ cat hello_cli.txt
#Hello Command Line
#MacBook-Pro-2:~ chenzhuo$ 

#Hello Git 
#git init
#Initalized empty Git repository in /home/ccuser/workspace/sorcerers-code/.git/
#git status
#git add
# git add scene-1.txt
#git diff filename
#git diff changes.txt

#git commit
#git commit -m "Complete first line of dialogue"
#git log
#git config

#5/27/19
#Boolean Expressions
# A boolean expression is a statement that can either be True or False.

#Relational Operators: Equal / Not equal

my_baby_bool = "true"
print(type(my_baby_bool))
#<Class 'str'>

my_baby_bool_two = True
print(type(my_baby_bool_two))
#<Class 'bool'>

#Python Control Flow
def dave_check(user_name):
  if user_name == "Dave":
    return "Get off my computer Dave!"
  if user_name == "angela_catlady_87":
    return "I know it is you Dave! Go away!"
  
# Enter a user name here, make sure to make it a string
user_name = "Dave"

print(dave_check(user_name))

#Remember to indent between if and return 
def greater_than(x, y):
  if x > y:
    return x
  if y > x:
    return y
  if x == y:
    return "These numbers are the same"
    
def graduation_reqs(credits):
  if credits >= 120:
    return "You have enough credits to graduate!"
  
print(graduation_reqs(120))

#Boolean Opearion: and 

statement_one =(2 + 2 + 2 >= 6) and (-1 * -1 < 0)

statement_two =(4 * 2 <= 8) and (7 - 1 == 6)

def graduation_reqs(gpa,credits):
  if credits >= 120 and gpa >= 2.0:
    return "You meet the requirements to graduate!"

statement_one =(2 - 1 > 3) or (-5 * 2 == -10)

#Boolean Opeartion: Or 

statement_two =(9 + 5 <= 15) or (7 != 4 + 3)

def graduation_mailer(gpa, credits):
  if (gpa >= 2.0) or (credits >= 120):
  	return True


#Boolean Opearion: Not
#Notice: "not" should be used with "and"
statement_one = False

statement_two = True

def graduation_reqs(gpa, credits):
  if (gpa >= 2.0) and (credits >= 120):
    return "You meet the requirements to graduate!"
  if (gpa >= 2.0) and not (credits >= 120):
    return "You do not have enough credits to graduate."
  if not (gpa >= 2.0) and (credits >= 120):
    return "Your GPA is not high enough to graduate."
  if not (gpa >= 2.0) and not (credits >= 120):
    return "You do not meet either requirement to graduate!"

#Else statement
def graduation_reqs(gpa, credits):
  if (gpa >= 2.0) and (credits >= 120):
    return "You meet the requirements to graduate!"
  if (gpa >= 2.0) and not (credits >= 120):
    return "You do not have enough credits to graduate."
  if not (gpa >= 2.0) and (credits >= 120):
    return "Your GPA is not high enough to graduate."
  else: 
  	return "You do not meet the GPA or the credit requirement for graduation."

#Else if command 
def grade_converter(gpa):
  if gpa >= 4.0:
    return "A"
  elif gpa >= 3.0:
    return "B"
  elif gpa >= 2.0:
    return "C"
  elif gpa >= 1.0:
    return "D"
  else:
    return "F"

#Try and except statement 
def raises_value_error():
  raise ValueError
  
try:
  raises_value_error()
except ValueError:
  print("You raised a ValueError!")

#Review Session
def applicant_selector(gpa,ps_score,ec_count):
  if (gpa>= 3.0) and (ps_score >= 90) and (ec_count>= 3):
    return "This applicant should be accepted."
  if (gpa>= 3.0) and (ps_score >= 90) and not (ec_count>= 3):
    return "This applicant should be given an in-person interview."
  else: 
    return "This applicant should be rejected."

#In Range 
# Write your in_range function here:
def in_range(num,lower,upper):
  if (num >= lower) and (num <= upper):
    return True 
  else:
    return False 
# Uncomment these function calls to test your in_range function:
#print(in_range(10, 10, 10))
# should print True
#print(in_range(5, 10, 20))
# should print False

#Movie Rating
# Write your movie_review function here:
def movie_review(rating):
  if (rating <= 5):
    return "Avoid at all costs!"
  elif (rating > 5) and (rating < 9):
    return "This one was fun."
  else:
    return "Outstanding!"
# Uncomment these function calls to test your movie_review function:
#print(movie_review(9))
# should print "Outstanding!"
#print(movie_review(4))
# should print "Avoid at all costs!"
#print(movie_review(6))
# should print "This one was fun."

# Write your twice_as_large function here:
def twice_as_large(num1, num2):
  if (num1 > num2*2):
    return True
  else:
    return False
# Uncomment these function calls to test your twice_as_large function:
#print(twice_as_large(10, 5))
# should print False
#print(twice_as_large(11, 5))
# should print True

#Large Power 
# Write your large_power function here:
def large_power(base,exponent):
  if (base**exponent > 5000):
    return True
  else:
    return False
# Uncomment these function calls to test your large_power function:
#print(large_power(2, 13))
# should print True
#print(large_power(2, 12))
# should print False

#Divisible by 10
#Use % to show divisibility 
# Write your divisible_by_ten function here:
def divisible_by_ten(num):
  if (num % 10 == 0 ):
    return True
  else:
    return False 
# Uncomment these function calls to test your divisible_by_ten function:
#print(divisible_by_ten(20))
# should print True
#print(divisible_by_ten(25))
# should print False

#Max Number
# Write your max_num function here:
def max_num(num1, num2, num3):
  if (num1 > num2) and (num1 > num3):
    return num1
  if (num2 > num1) and (num2 > num3):
    return num2
  if (num3 > num1) and (num3 > num2):
    return num3
  if (num1== num2) or (num1 == num3) or (num2 == num3): 
    return "It's a tie!"
# Uncomment these function calls to test your max_num function:
#print(max_num(-10, 0, 10))
# should print 10
#print(max_num(-10, 5, -30))
# should print 5
#print(max_num(-5, -10, -10))
# should print -5
#print(max_num(2, 3, 3))
# should print "It's a tie!"


#budget
# Write your over_budget function here:
def over_budget(budget, food_bill, electricity_bill, internet_bill, rent):
  if (budget < food_bill + electricity_bill + internet_bill + rent):
    return True 
  else:
    return False
# Uncomment these function calls to test your over_budget function:
#print(over_budget(100, 20, 30, 10, 40))
# should print False
#print(over_budget(80, 20, 30, 10, 30))
# should print True


#Always false 
# Write your always_false function here:
def always_false(num):
  return False

# Uncomment these function calls to test your always_false function:
#print(always_false(0))
# should print False
#print(always_false(-1))
# should print False
#print(always_false(1))
# should print False

#Not equal 
# Write your not_sum_to_ten function here:
def not_sum_to_ten(num1, num2):
  if (10 != num1 + num2):
    return True 
  else:
    return False
# Uncomment these function calls to test your not_sum_to_ten function:
#print(not_sum_to_ten(9, -1))
# should print True
#print(not_sum_to_ten(9, 1))
# should print False
#print(not_sum_to_ten(5,5))
# should print False

#5/29/2019
#Same name 
# Write your same_name function here:
def same_name(your_name, my_name):
  if str(your_name) == str(my_name):
    return True
  else:
    return False
  
# Uncomment these function calls to test your same_name function:
#print(same_name("Colby", "Colby"))
# should print True
#print(same_name("Tina", "Amber"))
# should print False

#Sal's Ship
def normal_shipping_cost(weight):
  if (weight <= 2):
    cost = 20 + weight* 1.5
    return cost
  elif (weight <= 6):
    cost = 20 + weight* 3
    return cost
  elif (weight <= 10):
    cost = 20 + weight* 4
    return cost
  else:
    cost = 20 + weight* 4.75
    return cost 
  
print(normal_shipping_cost(8.4))

def premium_shipping_cost(weight):
  if (weight <= 2):
    cost = 20 + weight* 4.5
    return cost
  elif (weight <= 6):
    cost = 20 + weight* 9
    return cost
  elif (weight <= 10):
    cost = 20 + weight* 12
    return cost
  else:
    cost = 20 + weight* 14.25
    return cost 
  
print(premium_shipping_cost(1.5))

def compare_cost_shipping(weight):
  if (normal_shipping_cost(weight) < premium_shipping_cost(weight)):
    return "normal shipping is the cheapest"
  elif (normal_shipping_cost(weight) == premium_shipping_cost(weight)):
    return "The two methods are the same"
  else:
    return "premium shipping is the cheapest"
  difference = ormal_shipping_cost(weight) -premium_shipping_cost(weight)
  print(difference)
  
#lists
#What is a list 
heights = [61, 70, 67, 64, 65]

broken_heights = [65,71,59, 62]

#List cna be combination of numbers and strings 

ints_and_strings = [1, 2, 3, 'four', 'five', 'zhuo']

sam_height = ['Sam',67]

#List of lists
heights = [['Jenny', 61], ['Alexus', 70], ['Sam', 67], ['Grace', 64],['Vik',68]]

ages = [['Aaron',15],['Dhruti',16]]

#Zip
#Pair each element in two lists 
names = ['Jenny', 'Alexus', 'Sam', 'Grace']
dogs_names = ['Elphonse', 'Dr. Doggy DDS', 'Carter', 'Ralph']

names_and_dogs_names = zip(names,dogs_names)
print(names_and_dogs_names)

list_of_names_and_dogs_names = list(names_and_dogs_names)
print(list_of_names_and_dogs_names)
# The result of zip was <zip object at 0x7f22730e06c8>

#Empty Lists
#We can fill them later

#Growing a list: append 
orders = ['daisies', 'periwinkle']
print(orders)

orders.append('tulips')
orders.append('roses')

print(orders)

#Growing a list: Plus(+)
orders = ['daisy', 'buttercup', 'snapdragon', 'gardenia', 'lily']

# Create new orders here:
new_orders = orders + ['lilac','iris']

broken_prices = [5, 3, 4, 5, 4] + [4]

#Range 
my_range = range(10)
#print(my_range)
#range(0, 10)
#print(list(my_range))
#[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
list1 = range(9)

range1 = range(8)

#Increase series with range command 
list1 = range(5, 15, 3)
list2 = range(0,40,5)
#It is like another command in Matlab 

first_names = ['Ainsley','Ben','Chani','Depak']
age = []
age.append(42)
all_ages = age + [32,41,29]

name_and_age = zip(first_names, all_ages)
#The following is just an application of range command
ids = range(4)

#5/30/2019
last_semester_gradebook = [("politics", 80), ("latin", 96), ("dance", 97), ("architecture", 65)]

subjects = ["physics", "calculus","poetry","history"]

grades = [98, 97, 85, 88]

subjects.append("computer science")

grades.append(100)
#Save the zipped file as a list
gradebook = list(zip(subjects, grades))
gradebook.append(("visual arts", 93))
print(gradebook)


full_gradebook = gradebook + last_semester_gradebook

#Operations on List

#Length of list 
list1 = range(2, 20, 3)
list1_len = len(list1)
print(list1_len)

employees = ['Michael', 'Dwight', 'Jim', 'Pam', 'Ryan', 'Andy', 'Robert']
#Use brackets poperly
index4 = employees[4]

print(len(employees))
print(employees[0])

#Select List element
shopping_list = ['eggs', 'butter', 'milk', 'cucumbers', 'juice', 'cereal']

print(len(shopping_list))

last_element = shopping_list[-1]
print(shopping_list[-1])

element5 = shopping_list[5]
#Print more than 1 element once
print(element5,last_element)

#Slicing List 
suitcase = ['shirt', 'shirt', 'pants', 'pants', 'pajamas', 'books']

beginning = suitcase[0:4]

print(beginning)
#Notice: 0 is counted in python
middle = suitcase[2:4]

suitcase = ['shirt', 'shirt', 'pants', 'pants', 'pajamas', 'books']
#Obtain first three elements and final two elements 
start = suitcase[:3]
end = suitcase[4:]

#Couunt elements in a list 
votes = ['Jake', 'Jake', 'Laurie', 'Laurie', 'Laurie', 'Jake', 'Jake', 'Jake', 'Laurie', 'Cassie', 'Cassie', 'Jake', 'Jake', 'Cassie', 'Laurie', 'Cassie', 'Jake', 'Jake', 'Cassie', 'Laurie']

jake_votes= votes.count('Jake')

print(jake_votes)

#Sort lists
### Exercise 1 & 2 ###
addresses = ['221 B Baker St.', '42 Wallaby Way', '12 Grimmauld Place', '742 Evergreen Terrace', '1600 Pennsylvania Ave', '10 Downing St.']
addresses.sort()
# Sort addresses here:
print(addresses)
### Exercise 3 ###
names = ['Ron', 'Hermione', 'Harry', 'Albus', 'Sirius']
names.sort()

### Exercise 4 ###
cities = ['London', 'Paris', 'Rome', 'Los Angeles', 'New York']

sorted_cities = cities.sort()
print(sorted_cities)
#This would not produce a sorted list of cities 
#This would only print NONE 

games = ['Portal', 'Minecraft', 'Pacman', 'Tetris', 'The Sims', 'Pokemon']
games_sorted = sorted(games)

print(games)
print(games_sorted)
#it can be viewed that (games) are not sorted in this case, while (games_sorted) are sorted

#Review Session
inventory = ['twin bed', 'twin bed', 'headboard', 'queen bed', 'king bed', 'dresser', 'dresser', 'table', 'table', 'nightstand', 'nightstand', 'king bed', 'king bed', 'twin bed', 'twin bed', 'sheets', 'sheets', 'pillow', 'pillow']

inventory_len = len(inventory)

first = inventory[1]

last = inventory[-1]

inventory_2_6 = inventory[2:6]

first_3 = inventory[:3]

twin_beds= inventory.count('twin bed')

inventory.sort()

#Project: Len's Slice 
toppings = ['pepperoni', 'pineapple', 'cheese', 'sausage', 'olives', 'anchovies', 'mushrooms']

prices = [2,6,1,3,2,7,2]
num_pizzas = len(toppings)

print("We sell " + str(num_pizzas)+  " different kinds of pizza!")

pizzas = list(zip(prices, toppings))

print (pizzas)

pizzas.sort()
cheapest_pizza= pizzas[1]
pricest_pizza = pizzas[-1]

three_cheapest = pizzas[:2]
print(three_cheapest)

#Cunt the $2 slices 
num_two_dollar_slices = pizzas.count(2)

#Double index
#Write your function here
#if index is less than the length of this list, the indexed element in the list will be doubled 
#Else: return initial list 
def double_index(lst, index):
  if index < len(lst):
  	lst[index] = lst[index] * 2
  return lst

#Uncomment the line below when your function is done
print(double_index([3, 8, -10, 12], 2))

#5/31/2019
#Remove middle
#Write your function here
def remove_middle(lst, start, end):
  return lst[:start] + lst[-2:]

#Uncomment the line below when your function is done
print(remove_middle([4, 8, 15, 16, 23, 42], 1, 3))

#More than N
#Write your function here
def more_than_n(lst, item, n):
  times = lst.count(item)
  if (times > n):
    return True
  else:
    return False

#Uncomment the line below when your function is done
print(more_than_n([2, 4, 6, 2, 3, 2, 1, 2], 2, 3))

